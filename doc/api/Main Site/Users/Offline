Notes:
All the calls that require authentication must have these headers:
    a) Content-Type: application/json
    b) Accept: application/json
    c) Authorization: <token>
       Example: "Authorization: 4233af28e7674dca61b1767baf99b6acada3f6d5c035324a8c66ddf622ab8198c30d0a3ea6a9034f03c1d4e5b463286bf6f7aa9fd06f1021dcc21ba25d729da8"

1. Sign Up:

    Request: POST /api/users
    {
        "api_user": {
            "email": "EMAIL",
            "password": "PASSWORD 8+ SYMBOLS",
            "password_confirmation": "PASSWORD 8+ SYMBOLS"
        }
    }

    Response #1: 201 CREATED

    Notes: an email with a confirmation link will be sent.

    Link in the email: http://localhost:3000/api/users/confirmation?confirmation_token=v_B4RJRN8PustaRUU2sz

    Errors:
    Response #2: 422 UNPROCESSABLE ENTITY
    {
        "errors": {
            "email": [
                "has already been taken"
            ]
        }
    }

    Response #3: 422 UNPROCESSABLE ENTITY
    {
        "errors": {
            "email": [
                "is invalid"
            ]
        }
    }

    Response #4: 422 UNPROCESSABLE ENTITY
    {
        "errors": {
            "api_user": [
                "parameter is required"
            ]
        }
    }

    Response #5: 422 UNPROCESSABLE ENTITY
    {
        "errors": {
            "email": [
                "parameter is required"
            ]
        }
    }

    Response #6: 422 UNPROCESSABLE ENTITY
    {
        "errors": {
            "password": [
                "parameter is required"
            ]
        }
    }

    Response #7: 422 UNPROCESSABLE ENTITY
    {
        "errors": {
            "password_confirmation": [
                "parameter is required"
            ]
        }
    }

    Response #8: 422 UNPROCESSABLE ENTITY
    {
        "errors": {
            "password": [
                "is too short (minimum is 8 characters)"
            ]
        }
    }

    Response #9: 422 UNPROCESSABLE ENTITY
    {
        "errors": {
            "password_confirmation": [
                "doesn't match Password"
            ]
        }
    }



2. Sign Up, based on the link in email

   Request: GET /api/users/confirmation?confirmation_token=<TOKEN>

   Response #1: 200 OK
   {
       "token": "049f078877f323962528ee3281e09424317b2e8a7e11ce4bfb13567531511efb1deebfb33dffc22074394bbd2293807201247692d4c9a281158fbb0d3ee128f3"
   }

    Errors:
    Response #2: 422 UNPROCESSABLE ENTITY
    {
       "errors": {
           "confirmation_token": [
               "is invalid"
           ]
       }
    }

    Response #3: 422 UNPROCESSABLE ENTITY
    {
       "errors": {
           "api_user": [
               "parameter is required"
           ]
       }
    }


3. Sign In

    Request: POST /api/users/sign_in
    {
        "api_user": {
            "email": "EMAIL",
            "password": "PASSWORD 8+ SYMBOLS",
        }
    }

    Response #1: 200 OK
    {
        "token": "049f078877f323962528ee3281e09424317b2e8a7e11ce4bfb13567531511efb1deebfb33dffc22074394bbd2293807201247692d4c9a281158fbb0d3ee128f3"
    }

    Errors:
    Response #2:
    <TODO FIX FORMAT>
    {
        "error": "Invalid email address or password."
    }


4.  Facebook Connect (both creating account and login)

    Request: POST /api/users/facebook_connect
    {
        "api_user": {
            "fb_user_id": "FACEBOOK USER",
            "fb_token":   "FACEBOOK TOKEN"
        }
    }

    Response #1: 200 OK
    {
        "token": "049f078877f323962528ee3281e09424317b2e8a7e11ce4bfb13567531511efb1deebfb33dffc22074394bbd2293807201247692d4c9a281158fbb0d3ee128f3"
    }

    Errors:
    Response #2:
    {
        "errors": {
            "global": [
                "Facebook authorization problem: type: OAuthException, code: 190, error_subcode: 467, message: Error validating access token: This may be because the user logged out or may be due to a system error. [HTTP 400]"
            ]
        }
    }
    Note: it's an error from FB "as is"


5. Lost Password

    Request: POST /api/users/password
    {
       "api_user": {
           "email": "EMAIL"
       }
    }

    Notes: email will be sent:

    Link in the email: http://localhost:3000/api/users/password/edit?reset_password_token=atWEFaHZkMLD-SXyZBYX

    Response #1: 201 OK

    Errors:
    Response #2: 404 NOT FOUND
    {
       "errors": {
           "global": [
               "Resource not found"
           ]
       }
    }

    This response is possible, if user email is not found in the database OR if user account is created through Facebook.

6. Reset password, based on the link in email

    Request: PUT /api/users/password
    {
      "api_user": {
          "reset_password_token": "TOKEN FROM RESET LINK",
          "password": "PASSWORD 8+ SYMBOLS",
          "password_confirmation": "PASSWORD 8+ SYMBOLS"
      }
    }

    Response #1: 200 OK
    {
       "token": "21cc8eba19db50dbfb1f5fdb77da49068a2e94310b4f429c536d03799aeb7f9325f857091e7fb2f530de1e093119e2c88f654ac767325ad13488787927805b1a"
    }
    Notes: if password is successfully restored, user will be automatically authorized, so the "token" will be returned.


    Errors:
    See examples above, in "1. Sign Up"

